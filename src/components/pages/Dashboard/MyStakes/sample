import { Container } from "react-bootstrap";
import "./MyStakes.scss";
import Table from "../../../common/Table/Table";
import Button from "../../../common/Button/Button";
import { handleGetUserStakes } from "../../../../services/aptos.service";
import { useKeylessAccounts } from "../../../../core/useKeylessAccounts";
import { useEffect, useState } from "react";
import moment from "moment";
import { useAppSelector } from "../../../../utils/hooks";
import { RootState } from "../../../../redux/store";

const MyStakes = () => {
  const fields = [
    {
      name: (
        <>
          Date of <br />
          Staking
        </>
      ),
    },
    {
      name: (
        <>
          Amount <br />
          Staked (in KRZ)
        </>
      ),
    },
    {
      name: (
        <>
          Expiry <br />
          Date
        </>
      ),
    },
    { name: <>Status</> },
    { name: <></> },
  ];

  const { activeAccount } = useKeylessAccounts();
  const krzDecimals = useAppSelector(
    (state: RootState) => state.user.krzDecimals
  );
  const [myStakes, setMyStakes] = useState([]);

  const formatExpiryDate = (expiryDate) => {
    const expiry = moment.unix(expiryDate);
    return expiry.format("Do MMMM 'YY, HH:mm [UTC]");
  };

  const getStatus = (stakeDate) => {
    const now = moment.utc();
    const stakeMoment = moment.unix(stakeDate).utc();

    // Day 1: Till UTC 12:00 - Status "In Process"
    if (
      now.isSame(stakeMoment, "day") &&
      now.isBefore(stakeMoment.clone().startOf("day").add(12, "hours"))
    ) {
      return "In Process";
    }

    // Day 2 and Day 3: "Active" till UTC 12:00
    const day2Start = stakeMoment.clone().startOf("day").add(12, "hours"); // Start of Day 2
    const day4Start = stakeMoment
      .clone()
      .startOf("day")
      .add(3, "days")
      .add(12, "hours"); // Start of Day 4

    if (now.isAfter(day2Start) && now.isBefore(day4Start)) {
      return "Active";
    }

    // Day 4 and beyond: "Expired"
    if (now.isAfter(day4Start)) {
      return "Expired";
    }

    return "Expired"; // Default fallback
  };

  useEffect(() => {
    const handleGetMyStakes = async () => {
      const res = await handleGetUserStakes(activeAccount);
      console.log("res", res);
      if (res && res.length) {
        const formattedStakes = res[0].map((stake) => ({
          date: moment.unix(stake.date).format("Do MMMM 'YY, HH:mm [UTC]"),
          amount: stake.amount / Math.pow(10, krzDecimals), // Assuming KRZ has 6 decimals
          expiry: formatExpiryDate(stake.expiry_date),
          status: getStatus(stake.date),
        }));
        console.log("formattedStakes", formattedStakes);
        setMyStakes(formattedStakes);
      }
    };

    if (activeAccount) {
      handleGetMyStakes();
    }
  }, [activeAccount]);

  return (
    <section className="my_stakes">
      <Container>
        <div className="my_stakes_in">
          <Table title="My Stakes" fields={fields}>
            {myStakes.length > 0 &&
              myStakes.map((item, index) => {
                return (
                  <tr key={index}>
                    <td>
                      <span className="date">{item.date}</span>
                    </td>
                    <td>{item.amount}</td>
                    <td>{item.expiry}</td>
                    <td className={item.status.toLowerCase()}>{item.status}</td>
                    <td>
                      {item.status === "Active" && (
                        <Button className="invest_btn">Restake</Button>
                      )}
                    </td>
                  </tr>
                );
              })}
          </Table>
        </div>
      </Container>
    </section>
  );
};

export default MyStakes;
